name: Deploy to Release Environment

on:
  push:
    branches:
      - release

# TODO job을 build, upload, deploy로 나눌 수 있으면 나누기
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 0. 시스템 시간을 TIMESTAMP 에 저장
      - name: Set TIMESTAMP Variable
        id: set-timestamp
        run: echo "TIMESTAMP=$(TZ=Asia/Seoul date +"%Y%m%d_%H%M")" >> $GITHUB_ENV

      # 1. 소스코드 체크아웃
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Java 환경 설정
      - name: Setup JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      # 3. Gradle 환경 설정
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      # 4. Spring Boot 애플리케이션 빌드
      - name: Build Spring Boot application
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test
        shell: bash

      # 5. jar 파일 및 배포 스크립트 준비
      - name: Prepare deployment package
        env:
          TIMESTAMP: ${{ env.TIMESTAMP }}
        run: |
          mkdir deploy_${TIMESTAMP}
          cp build/libs/*SNAPSHOT.jar deploy_${TIMESTAMP}/app.jar
          cp script/deploy.sh deploy_${TIMESTAMP}/deploy.sh
          zip -r deploy_${TIMESTAMP}.zip deploy_${TIMESTAMP}/

      # 6. AWS Credentials 설정해서 NCloud Object Storage 사용 준비
      - name: Configure NCloud Object Storage
        run: |
          aws configure set aws_access_key_id ${{ secrets.NCP_ACCESS_KEY }}
          aws configure set aws_secret_access_key ${{ secrets.NCP_SECRET_ACCESS_KEY }}
          aws configure set region ${{ secrets.NCP_REGION }}
          aws configure set endpoint-url https://kr.object.ncloudstorage.com

      # 7. Object Storage 로 업로드
      - name: Upload to Object Storage
        env:
          TIMESTAMP: ${{ env.TIMESTAMP }}
        run: aws --endpoint-url=https://kr.object.ncloudstorage.com s3 cp ./deploy_${TIMESTAMP}.zip s3://${{ secrets.RELEASE_BUCKET_NAME }}/deploy_${TIMESTAMP}.zip

      # TODO 다운로드 경로가 지속적으로 바뀜. 일단은 github 시크릿키로 다운로드 url을 등록하고, 추후 최신 파일을 자동으로 찾아서 다운로드하는 방법 적용
      # TODO NCP CLI 가 작은 용량이 아니다보니 설치하는데 시간이 많이 걸릴 듯. 캐싱을 사용하거나, 아예 기본 가상 머신(ubuntu-latest) 대신 NCP CLI가 설치돼있는 커스텀 클라우드 시스템을 사용 ('self-hosted-runner')
      #     <- 일단 전체 파이프라인을 완료하는데 걸리는 시간을 확인하고 결정
      # 8. NCP CLI 설정
      - name: Configure NCP CLI
        run: |
          cd ~
          wget ${{ secrets.NCP_CLI_DOWNLOAD_URL }}${{ secrets.NCP_CLI_FILE_NAME }}.zip
          unzip ${{ secrets.NCP_CLI_FILE_NAME }}.zip
          mkdir .ncloud
          echo -e "[DEFAULT]\nncloud_access_key_id = ${{ secrets.NCP_ACCESS_KEY }}\nncloud_secret_access_key = ${{ secrets.NCP_SECRET_ACCESS_KEY }}\nncloud_api_url = ${{ secrets.NCP_API_URL }}" >> .ncloud/configure

      # 9. Github Actions의 IP 주소 받아오기
      - name: Get Github Actions Runner's IP
        id: ip
        uses: haythem/public-ip@v1.3

      # 10. GitHub Actions의 IP 주소를 NCloud Server의 ACG에 추가
      - name: Add Runner's IP to NCloud ACG
        run: |
          cd ~
          cd ${{ secrets.NCP_CLI_FILE_NAME }}/cli_linux
          ./ncloud vserver addAccessControlGroupInboundRule --regionCode KR --vpcNo ${{ secrets.NCP_VPC_NO }} --accessControlGroupNo ${{ secrets.NCP_RELEASE_ACG_NO }} --accessControlGroupRuleList "protocolTypeCode='TCP', ipBlock='${{ steps.ip.outputs.ipv4 }}/32', portRange='22'"

      # 11. NCloud Server 에서 배포 스크립트 실행
      - name: SSH into NCloud Server and Deploy
        uses: appleboy/ssh-action@v1.2.0
        env:
          TIMESTAMP: ${{ env.TIMESTAMP }}
          BUCKET_NAME: ${{ secrets.RELEASE_BUCKET_NAME }}
        with:
          host: ${{ secrets.NCLOUD_RELEASE_SERVER_IP }}
          username: ${{ secrets.NCLOUD_SERVER_USERNAME }}
          password: ${{ secrets.NCLOUD_RELEASE_SERVER_PASSWORD }}
          envs: TIMESTAMP,BUCKET_NAME
          script: | #TODO Object Storage CLI docs에 endpoint-url='http'://... 라고 되어 있는데 우선 https 로 바꾸고 실행
            aws --endpoint-url=https://kr.object.ncloudstorage.com s3 cp s3://${BUCKET_NAME}/deploy_${TIMESTAMP}.zip ./workspace/deploy_${TIMESTAMP}.zip
            cd workspace
            unzip deploy_${TIMESTAMP}.zip && rm deploy_${TIMESTAMP}.zip
            cd deploy_${TIMESTAMP}
            chmod +x ./deploy.sh
            ./deploy.sh

      # 12. GitHub Actions의 IP 주소를 NCloud Server의 ACG에서 삭제
      - name: Delete Runner's IP from NCloud ACG
        run: |
          cd ~
          cd ${{ secrets.NCP_CLI_FILE_NAME }}/cli_linux
          MAX_RETRIES=5
          RETRY_COUNT=0
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            STATUS=$(./ncloud vserver getAccessControlGroupList --regionCode KR --vpcNo ${{ secrets.NCP_VPC_NO }} --accessControlGroupNoList ${{ secrets.NCP_RELEASE_ACG_NO }} | jq -r '.accessControlGroupList[0].status')
            if [ "$STATUS" == "normal" ]; then
              echo "ACG settings are now normal. Proceeding with deletion."
              ./ncloud vserver removeAccessControlGroupInboundRule --regionCode KR --vpcNo ${{ secrets.NCP_VPC_NO }} --accessControlGroupNo ${{ secrets.NCP_RELEASE_ACG_NO }} --accessControlGroupRuleList "protocolTypeCode='TCP', ipBlock='${{ steps.ip.outputs.ipv4 }}/32', portRange='22'"
              exit 0
            fi
            echo "ACG settings are still being updated. Retrying in 10 seconds... (Attempt $((RETRY_COUNT+1))/$MAX_RETRIES)"
            sleep 10
            RETRY_COUNT=$((RETRY_COUNT + 1))
          done
          echo "Failed to delete ACG rule after $MAX_RETRIES attempts."
          exit 1
